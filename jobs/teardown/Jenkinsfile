/**
 * Jenkinsfile
 *
 * Jenkins Pipeline to build and manage Atomic OpenShift
 */
properties([
    parameters([
        string(
          name: 'BUILD_NUMBER',
          description: 'Build number of the provision-mutliarch-slave job.',
        )
    ])
])

podTemplate(
  name: 'provisioner',
  label: 'provisioner',
  cloud: 'openshift',
  serviceAccount: 'jenkins',
  idleMinutes: 0,
  namespace: 'redhat-multiarch-qe',
  containers: [
    // This adds the custom slave container to the pod. Must be first with name 'jnlp'
    containerTemplate(
      name: 'jnlp',
      image: "172.30.1.1:5000/redhat-multiarch-qe/provisioner",
      ttyEnabled: false,
      args: '${computer.jnlpmac} ${computer.name}',
      command: '',
      workingDir: '/tmp',
      privileged: true
    )
  ]
)

{
  node ('provisioner') {
    ansiColor('xterm') {
      timestamps {
        def slaveProps = null

        // Prepare the cinch teardown inventory
        stage('Setup') {
          sh 'tenant=$(< ~/.k5identity); kinit -k $tenant'

          // Clone the provisioning setup
          git 'https://github.com/RedHat-MultiArch-QE/multiarch-ci-provisioner'

          dir('cinch') {
            git 'https://github.com/RedHatQE/cinch'
          }

          try {
            // Copy artifacts from build
            step([$class: 'CopyArtifact', filter: 'workspace/inventories/*.inventory',
                projectName: 'provision-multiarch-slave',
                selector: [$class: 'SpecificBuildSelector', buildNumber: params.BUILD_NUMBER]])
            step([$class: 'CopyArtifact', filter: 'workspace/resources/*.output',
                projectName: 'provision-multiarch-slave',
                selector: [$class: 'SpecificBuildSelector', buildNumber: params.BUILD_NUMBER]])
            def properties = step([$class: 'CopyArtifact', filter: '*-slave.properties',
                projectName: 'provision-multiarch-slave',
                selector: [$class: 'SpecificBuildSelector', buildNumber: params.BUILD_NUMBER]])
          } catch (e) {
            // The provisioning job did not successfully provision a machine, so there is nothing to teardown
            currentBuild.result = 'SUCCESS'
            return
          }

          // Load slave properties (you may need to turn off sandbox or approve this in Jenkins)
          def propertyFiles = findFiles glob: '*-slave.properties'
          slaveProps = readProperties file: "${propertyFiles[0].path}"
        }

        // Preform the actual teardown
        stage('Teardown') {
          try {
            sh "ansible-playbook --inventory workspace/inventories/${slaveProps.target}.inventory cinch/cinch/teardown.yml"
          } catch (e) {
            println e
          }

          try {
            sh "linchpin --workspace workspace --verbose destroy ${slaveProps.target}"
          } catch (e) {
            println e

            if (slaveProps.error == null || slaveProps.error.isEmpty()) {
              currentBuild.result = 'FAILURE'
            }
          }
        }
      }
    }
  }
}
