/**
 * Jenkinsfile
 *
 * Jenkins Pipeline to provision bare metal slaves in beaker.
 */
properties([
  parameters([
    choiceParam(
      name: 'ARCH',
      choices: "x86_64\nppc64le\naarch64\ns390x",
      description: 'Architecture'
    )
  ])
])

node ('jenkins-slave') {
    ansiColor('xterm') {
        timestamps {
            def jslaveName = 'jenkins-slave-' + env.BUILD_NUMBER + '-' + params.ARCH
            env.JSLAVE_NAME = jslaveName
            env.JSLAVE_LABEL = jslaveName
            env.ARCH = params.ARCH
          
            stage('Setup') {
		// Ensure kerberos ticket is fresh
		sh 'kinit -k jpoulin'
		    
                // Get linchpin topology
                git 'https://github.com/jaypoulz/multiarch-ci-pipeline'
		    
		// Download slave playbooks
		dir('cinch') {
                    git 'https://github.com/RedHatQE/cinch'
                }
            }
            
	    def slaveTarget = null
	    try {
	        stage('Provision') {
		    slaveTarget = "jenkins-slave-${params.ARCH}"
		    sh "linchpin -vvvv up ${slaveTarget}"
		    sh """
		    ansible-playbook --inventory inventories/${slaveTarget}.inventory \
		        --extra-vars '{ "rpm_key_imports":[], "jenkins_master_repositories":[], "jenkins_master_download_repositories":[] }' \
			cinch/cinch/site.yml
		    """
	        }
	    } catch (e) {
                currentBuild.result = 'FAILURE'
	    } finally {    
                stage('Archive') {
                    // Archive linchpin output
                    archiveArtifacts artifacts: 'inventories/*.inventory', fingerprint: true
                    archiveArtifacts artifacts: 'resources/*.output', fingerprint: true

                    // Archive slave name in a slave.properties file
		    writeFile(file: 'slave.properties', text: "name:${jslaveName}\ntarget:${slaveTarget}")
                    archiveArtifacts artifacts: 'slave.properties', fingerprint: true
		}
	    }
	}
    }
}
