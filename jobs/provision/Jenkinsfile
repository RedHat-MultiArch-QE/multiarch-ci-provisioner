/**
 * Jenkinsfile
 *
 * Jenkins Pipeline to provision bare metal slaves in beaker.
 */
properties([
    parameters([
        choiceParam(
          choices: 'x86_64\nppc64le\naarch64\ns390x',
          defaultValue: 'x86_64',
          description: 'Architecture',
          name: 'ARCH'
        ),

        booleanParam(
          defaultValue: true,
          description: 'Run cinch to connect provisioned node to Jenkins master.',
          name: 'CONNECT_AS_SLAVE'
        )
    ])
])

node ('provisioner') {
  ansiColor('xterm') {
    timestamps {

      stage('Setup') {
        // Ensure kerberos ticket is fresh
        sh 'kinit -k jpoulin'

        // Get linchpin topology
        git 'https://github.com/RedHat-MultiArch-QE/multiarch-ci-pipeline'

        // Download slave playbooks
        if (params.CONNECT_AS_SLAVE) {
          dir('cinch') {
            git 'https://github.com/RedHatQE/cinch'
          }
        }
      }

      try {
        def arch = params.ARCH
        def slaveTarget = "${arch}-slave"
        def slaveName = "${slaveTarget}-${env.BUILD_NUMBER}"
        def provisioned = true
        def error = ""

        stage ("Provision") {
          try {
            sh "linchpin -vvvv up ${slaveTarget}"
            if (params.CONNECT_AS_SLAVE) {
              def extraVars = "\'{ \"rpm_key_imports\":[], \"jenkins_master_repositories\":[], \"jenkins_master_download_repositories\":[], \"jslave_name\":${slaveName}, \"jslave_label\":${slaveName}, \"arch\":${arch} }\'"
              sh "ansible-playbook --inventory inventories/${slaveTarget}.inventory --extra-vars ${extraVars} cinch/cinch/site.yml"
              sh 'su - jenkins'
              sh 'yum install python-devel openssl-devel libffi-devel -y'
              sh 'pip install --user --upgrade pip setuptools; pip install --user ansible'
            }
          } catch (e) {
            error = e.toString()
            provisioned = false
          } finally {
            // Archive slave name in a slave.properties file
            writeFile(file: "${slaveTarget}.properties", text: "name:${slaveName}\ntarget:${slaveTarget}\nprovisioned:${provisioned}\nerror:${error}\narch:${arch}")
          }
        }

      } catch (e) {
        currentBuild.result = 'FAILURE'
      } finally {
        stage('Archive') {
          // Archive linchpin output and provision summary properties file
          archiveArtifacts artifacts: 'inventories/*.inventory', fingerprint: true
          archiveArtifacts artifacts: 'resources/*.output', fingerprint: true
          archiveArtifacts artifacts: '*-slave.properties', fingerprint: true
        }
      }
    }
  }
}
