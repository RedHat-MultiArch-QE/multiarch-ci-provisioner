/**
 * Jenkinsfile
 *
 * Jenkins Pipeline to provision bare metal slaves in beaker.
 */
properties([
    parameters([
        choiceParam(
          choices: 'x86_64\nppc64le\naarch64\ns390x',
          defaultValue: 'x86_64',
          description: 'Architecture',
          name: 'ARCH'
        ),
        booleanParam(
          defaultValue: false,
          description: 'Run Cinch to connect provisioned host to the Jenkins master.',
          name: 'CONNECT_TO_MASTER'
        ),
        booleanParam(
          defaultValue: false,
          description: 'Install Ansible on provisioned host.',
          name: 'INSTALL_ANSIBLE'
        )
    ])
])

podTemplate(
  name: 'provisioner',
  label: 'provisioner',
  cloud: 'openshift',
  serviceAccount: 'jenkins',
  idleMinutes: 0,
  namespace: 'redhat-multiarch-qe',
  containers: [
    // This adds the custom slave container to the pod. Must be first with name 'jnlp'
    containerTemplate(
      name: 'jnlp',
      image: "172.30.1.1:5000/redhat-multiarch-qe/provisioner",
      ttyEnabled: false,
      args: '${computer.jnlpmac} ${computer.name}',
      command: '',
      workingDir: '/tmp',
      privileged: true
    )
  ]
)

{
  node ('provisioner') {
    ansiColor('xterm') {
      timestamps {

        stage('Setup') {
          // Ensure kerberos ticket is fresh
          sh 'tenant=$(< ~/.k5identity); kinit -k $tenant'

          // Get linchpin topology
          git 'https://github.com/RedHat-MultiArch-QE/multiarch-ci-provisioner'

          // Download slave playbooks
          if (params.CONNECT_TO_MASTER) {
            dir('cinch') {
              git 'https://github.com/RedHatQE/cinch'
            }
          }
        }

        try {
          def arch = params.ARCH
          def slaveTarget = "${arch}-slave"
          def slaveName = "${slaveTarget}-${env.BUILD_NUMBER}"
          def provisioned = true
          def connectedToMaster = false
          def ansibleInstalled = false
          def error = ""

          stage ("Provision") {
            try {
              dir ('workspace') {
                sh "linchpin --workspace . --verbose up ${slaveTarget}"
              }
              if (params.CONNECT_TO_MASTER) {
                def extraVars = "\'{ \"rpm_key_imports\":[], \"jenkins_master_repositories\":[], \"jenkins_master_download_repositories\":[], \"jslave_name\":${slaveName}, \"jslave_label\":${slaveName}, \"arch\":${arch} }\'"
                sh "ansible-playbook --inventory workspace/inventories/${slaveTarget}.inventory --extra-vars ${extraVars} cinch/cinch/site.yml"
                connectedToMaster = true
              }
              if (params.INSTALL_ANSIBLE) {
                node (slaveName) {
                  sh 'sudo yum install python-devel openssl-devel libffi-devel -y'
                  sh 'sudo pip install --upgrade pip; sudo pip install --upgrade setuptools; sudo pip install --upgrade ansible'
                }
                ansibleInstalled = true
              }
            } catch (e) {
              error = e.toString()
              provisioned = false
            } finally {
              // Archive slave name in a slave.properties file
              def results = "name:${slaveName}\n" +
                "target:${slaveTarget}\n" +
                "arch:${arch}\n" +
                "provisioned:${provisioned}\n" +
                "jenkins.master.connected:${connectedToMaster}\n" +
                "ansible.installed:${ansibleInstalled}\n" +
                "error:${error}\n"
              writeFile(file: "workspace/${slaveTarget}.properties", text: results)
            }
          }

        } catch (e) {
          currentBuild.result = 'FAILURE'
        } finally {
          stage('Archive') {
            // Archive linchpin output and provision summary properties file
            archiveArtifacts artifacts: 'workspace/inventories/*.inventory', fingerprint: true
            archiveArtifacts artifacts: 'workspace/resources/*.output', fingerprint: true
            archiveArtifacts artifacts: 'workspace/*-slave.properties', fingerprint: true
          }
        }
      }
    }
  }
}
