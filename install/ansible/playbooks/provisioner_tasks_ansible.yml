---
- name: create redhat-multiarch-qe project in openshift
  openshift_raw:
    kind: Project
    name: redhat-multiarch-qe
    description: Red Hat MultiArch QE CI Provisioner
    state: present

- name: upload jenkins template
  openshift_raw:
    namespace: redhat-multiarch-qe
    definition: "{{ lookup('template', jenkins_template_path) | from_yaml }}"
    state: "{{ item }}"
  # the module fails when the image already exists.
  # a workaround is to remove the image object, then
  # create it again
  with_items:
    - absent
    - present

- name: deploy jenkins ci container
  shell: >
    oc login -u developer &&
    oc project redhat-multiarch-qe &&
    oc get deploymentconfigs -n redhat-multiarch-qe |
    grep "jenkins" ||
    oc new-app jenkins-persistent --param HOSTNAME={{ openshift_master_hostname }} --param PUBLIC_IP={{ openshift_master_external_ip }}

- name: create provisioner secrets
  no_log: true
  block:
    - name: upload secrets to openshift
      openshift_raw:
        state: present
        definition:
          kind: Secret
          apiVersion: v1
          metadata:
            name: "{{ item.0 }}"
            namespace: redhat-multiarch-qe
          type: Opaque
          data:
            filename: '{{ lookup("file", item.1) | b64encode }}'
      with_together:
        - [sshprivkey, sshpubkey, beaker, bkrconf, krb5, krbconf]
        - [ "{{ beaker_private_key_path }}",
            "{{ beaker_public_key_path }}",
            "{{ secrets_dir }}/beaker/client.conf",
            "{{ secrets_dir }}/beaker/client.conf",
            "{{ secrets_dir }}/krb5/krb5.conf",
            "{{ secrets_dir }}/krb5/krb5.conf" ]
    - name: upload kerberos principal to openshift as secret
      openshift_raw:
        state: present
        definition:
          kind: Secret
          apiVersion: v1
          metadata:
            name: krbprincipal
            namespace: redhat-multiarch-qe
          type: Opaque
          data:
            username: "{{ kerberos_principal | b64encode }}"
            password: none
    - name: get kerberos keytab and encode it
      local_action:
        # ansible can not even read the contents of the file
        # without encoding it first, so encode it before
        # registering it as a variable
        module: shell cat {{ kerberos_keytab_path }} | base64
      register: keytab_base64
    - name: upload keytab to openshift as secret
      openshift_raw:
        state: present
        definition:
          kind: Secret
          apiVersion: v1
          metadata:
            name: keytab
            namespace: redhat-multiarch-qe
          type: Opaque
          data:
            filename: '{{ keytab_base64.stdout }}'

- name: mark secrets to be synced with jenkins
  shell: >
    oc login -u developer &&
    oc label secret {{ item }} credential.sync.jenkins.openshift.io=true --overwrite=true
  with_items:
    - sshprivkey
    - sshpubkey
    - krbprincipal
    - keytab
    - krb5
    - beaker
    - krbconf
    - bkrconf

- name: deploy provisioner-builder template
  openshift_raw:
    namespace: redhat-multiarch-qe
    definition: "{{ lookup('template', provisioner_template_path) | from_yaml }}"
    state: "{{ item }}"
  with_items:
    - absent
    - present

- name: deploy provisioner-builder
  shell: >
    oc login -u developer &&
    oc project redhat-multiarch-qe &&
    oc get pods -n redhat-multiarch-qe |
    grep provisioner ||
    oc new-app provisioner-builder

- name: Promote Jenkins Service Account to privileged for external Jenkins setups
  shell: >
    oc login -u system:admin &&
    oc adm policy add-scc-to-user anyuid system:serviceaccount:redhat-multiarch-qe:jenkins
